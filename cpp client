#include <iostream>
#include <boost/asio.hpp>

using boost::asio::ip::tcp;

class ChatClient {
public:
    ChatClient(const std::string& host, const std::string& port)
        : resolver_(io_service_), socket_(io_service_) {

        tcp::resolver::query query(host, port);
        resolver_.async_resolve(query,
            [this](const boost::system::error_code& err,
                   tcp::resolver::iterator endpoint_iterator) {
                if (!err) {
                    connect(endpoint_iterator);
                }
            });
    }

    void run() { io_service_.run(); }

private:
    void connect(tcp::resolver::iterator endpoint_iterator) {
        boost::asio::async_connect(socket_, endpoint_iterator,
            [this](boost::system::error_code err, tcp::resolver::iterator) {
                if (!err) {
                    do_write("Hello Server!");
                    do_read();
                }
            });
    }

    void do_read() {
        socket_.async_read_some(boost::asio::buffer(data_),
            [this](boost::system::error_code err, std::size_t length) {
                if (!err) {
                    std::cout << "Received: " << std::string(data_, length) << "\n";
                    do_read();
                }
            });
    }

    void do_write(const std::string& message) {
        boost ::asio ::async_write(socket_, boost ::asio ::buffer(message),
            [](boost ::system ::error_code /*ec*/, std ::size_t /*length*/) {});
    }

private:
    boost ::asio ::io_service io_service_;
    tcp ::resolver resolver_;
    tcp ::socket socket_;
    char data_[1024];
};

int main(int argc, char* argv[]) {
    try {
        ChatClient client("127.0.0.1", "12345");
        client.run();
    } catch (std ::exception& e) {
        std ::cerr << "Exception: " << e.what() << "\n";
    }
}
